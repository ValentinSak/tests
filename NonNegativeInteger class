# Implement the NonNegativeInteger class, which describes a descriptor that checks whether the assigned or modified value of an attribute is a non-negative integer. 
# When creating an instance of the class, it should accept two arguments in the following order:
  # - name: the name of the attribute to which the descriptor will be attached.
  # - default: the default value. If not provided, it defaults to None.
# When accessing the attribute, the descriptor should return the value of the attribute if it is set. 
# If the value is not set, the default value specified when creating the descriptor should be returned. 
# If the default value is None, an AttributeError should be raised with the message:
#  'Attribute not found'
#When setting or modifying the attribute's value, the descriptor should check whether the value is a non-negative integer. 
#If the value is not a non-negative integer, a ValueError should be raised with the message:
#  'Invalid value'
# Note: Additional data validation is not required. It is guaranteed that the implemented class will only be used with valid data.

Here is my code:

class NonNegativeInteger:

    def __init__(self, name, default=None):
        self._attr = name
        self.default = default

    def __get__(self, obj, cls):
        if not self.default is None:
            obj.__dict__[self._attr] = self.default
        if obj is None:
            return self
        # if self._attr in cls.__dict__:
        #     return cls.__dict__[self._attr]
        if self._attr in obj.__dict__:
            return obj.__dict__[self._attr]
        else:
            raise AttributeError('Attribute not found')


    def __set__(self, obj, value):
        if not isinstance(value, int) or value < 0:
            raise ValueError('Invalid value')
        obj.__dict__[self._attr] = value
