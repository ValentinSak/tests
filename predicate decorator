#predicate decorator
#the task was to create decorator to combine predicates with operators &, | and ~, regardless of the number of arguments they take like this:
@predicate
def is_even(num):
    return num % 2 == 0

@predicate
def is_positive(num):
    return num > 0

print((is_even & is_positive)(4))            # True
print((is_even & is_positive)(3))            # False
print((is_even | is_positive)(3))            # True
print((~is_even & is_positive)(3))           # True

My version of code for this task:

import functools


class predicate:
    def __init__(self, func):
        functools.update_wrapper(self, func)
        self.func = func

    def __call__(self, *args, **kwargs):
        return self.func(*args, **kwargs)

    def __and__(self, other):
        return predicate(lambda *args, **kwargs: self(*args, **kwargs) and other(*args, **kwargs))

    def __or__(self, other):
        return predicate(lambda *args, **kwargs: self(*args, **kwargs) or other(*args, **kwargs))

    def __invert__(self):
        return predicate(lambda *args, **kwargs: not self(*args, **kwargs))



